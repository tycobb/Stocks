__author__ = 'Main Desktop'

import pandas as pd
import pandas.io.data as web
import datetime as dt
from scipy import stats, linspace


def main():
    ma_cross()


def ma_cross():
    all_data = {}
    email_body = []
    email_body_1 = []
    email_body_2 = []
    email_body_3 = []
    email_body_4 = []
    email_body_5 = []
    email_body_6 = []
    email_body_7 = []
    email_body_8 = []

    start = (dt.datetime.today() - dt.timedelta(days=100)).replace(hour=0,minute=0,second=0,microsecond=0)
    end = dt.datetime.today().replace(hour=0,minute=0,second=0,microsecond=0)

    df_tuple = get_stock_tickers()

    cnt_cross_8_21 = 0
    cnt_cross_50_up = 0
    cnt_cross_50_down = 0
    cnt_50d_vol = 0
    cnt_bullish_rev = 0
    cnt_bearish_rev = 0
    cnt_positive_slope = 0
    cnt_negative_slope = 0
    slope1 = 0
    slope2 = 0

    for ticker,comp_rating in df_tuple:
        try:
            all_data[ticker] = web.DataReader(str(ticker),'yahoo', start, end)

        except OSError:
            print('Error getting data from Yahoo. Ticker: ' + ticker)

        data = all_data[ticker]

        data['8d'] = 0.0
        data['21d'] = 0.0
        data['50d'] = 0.0

        data['8d'] = pd.rolling_mean(data['Adj Close'],8)
        data['21d'] = pd.rolling_mean(data['Adj Close'],21)
        data['50d'] = pd.rolling_mean(data['Adj Close'],50)
        data['Vol-50d'] = pd.rolling_mean(data['Volume'],50)

        # Linear Regression for Slope test
        y1 = data['50d'][-10:].tolist()
        x1 = [t for t in range(1,len(y1)+1)]
        slope1, intercept1, r_value1, p_value1, stderr1 = stats.linregress(x1,y1)

        y2 = data['50d'][-11:-1].tolist()
        x2 = [t for t in range(1,len(y2)+1)]
        slope2, intercept2, r_value2, p_value2, stderr2 = stats.linregress(x2,y2)

        if data['8d'][-1] > data['21d'][-1] and data['8d'][-2] < data['21d'][-2]:
            if cnt_cross_8_21 == 0: email_body_1.append('\n8d has crossed above the 21d.\n----------')
            email_body_1.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0',''))
            cnt_cross_8_21 += 1
        if data['50d'][-1] < data['Adj Close'][-1] and data['50d'][-2] > data['Adj Close'][-2]:
            if cnt_cross_50_up == 0: email_body_2.append('\nClosing price crossed above its 50d.\n----------')
            email_body_2.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0',''))
            cnt_cross_50_up += 1
        elif data['50d'][-1] < data['Adj Close'][-1] and data['50d'][-2] > data['Adj Close'][-2]:
            if cnt_cross_50_down == 0: email_body_3.append('\nClosing price crossed below its 50d.\n----------')
            email_body_3.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0',''))
            cnt_cross_50_down += 1
        if data['Volume'][-1] > data['Vol-50d'][-1] * 2 and data['Adj Close'][-1] >= data['Adj Close'][-2] * 1.05:
            if cnt_50d_vol == 0: email_body_4.append('\nVolume was 100% higher than the 50d average with a +5% gain.\n----------')
            email_body_4.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0',''))
            cnt_50d_vol += 1
        if (data['Low'][-1] < data['Low'][-2] and data['Adj Close'][-1] > data['High'][-2] and
                data['Volume'][-1] > data['Vol-50d'][-1] * 1.5):
            if cnt_bullish_rev == 0:
                email_body_5.append('\nBullish Reversal with Vol 50% higher than 50d average.\n----------')
            email_body_5.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0',''))
            cnt_bullish_rev += 1
        if (data['High'][-1] > data['High'][-2] and data['Adj Close'][-1] < data['Low'][-2] and
                data['Volume'][-1] > data['Vol-50d'][-1] * 1.5):
            if cnt_bearish_rev == 0:
                email_body_6.append('\nBearish Reversal with Vol 50% higher than 50d average.\n----------')
            email_body_6.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0', ''))
            cnt_bearish_rev += 1
        if slope2 < 0 < slope1:
            if cnt_positive_slope ==  0:
                email_body_7.append('\nLinear Regress slope when from negative to postive on the 50d over the last 10days.\n----------')
            email_body_7.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0', ''))
            cnt_positive_slope += 1
        elif slope1 < 0 < slope2:
            if cnt_negative_slope ==  0:
                email_body_8.append('\nLinear Regress slope when from postive to negative on the 50d over the last 10days.\n----------')
            email_body_8.append(str(ticker) + ' --- ' + str(comp_rating).replace('.0', ''))
            cnt_negative_slope += 1

    email_body.append(email_body_1)
    email_body.append(email_body_2)
    email_body.append(email_body_3)
    email_body.append(email_body_4)
    email_body.append(email_body_5)
    email_body.append(email_body_6)
    email_body.append(email_body_7)
    email_body.append(email_body_8)

    if email_body:
        date_message = [str('Data from ' + str(end))]
        email_body.insert(0,date_message)
        send_email('\n'.join(str(item) for x in email_body for item in x))

    # if email_body:
    #     date_message = [str('Data from ' + str(end))]
    #     email_body.insert(0,date_message)
    #     print('\n'.join(str(item) for x in email_body for item in x))


def get_stock_tickers():
    file_location = r'C:\Users\Main Desktop\Downloads\Email Script.xlsx'
    df = pd.read_excel(file_location)
    sym = df['Symbol'].tolist()
    comp = df['Comp Rating'].tolist()
    df_list = zip(sym,comp)

    return df_list


def send_email(body):
    import smtplib
    from email.mime.text import MIMEText

    msg = MIMEText(body)
    msg['Subject'] = 'SCW - Moving Average Notification'
    msg['From'] = 'pythonStockProgram@gmail.com'
    msg['To'] = 'petryszynjr@gmail.com, seansissman@gmail.com'

    s = smtplib.SMTP('smtp.gmail.com',587)
    s.ehlo()
    s.starttls()
    s.login('pythonStockProgram@gmail.com','thisisgoingtobeahardpasswordtoremember')
    s.send_message(msg)
    s.quit()

if __name__ == '__main__': main()



